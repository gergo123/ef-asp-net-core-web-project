using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Collections.Generic;
using Db3.Extension;
using Db3.Model.Placeholder;
using Db3.Interfaces;
using System.Threading.Tasks;
using System.Threading;
using System;
using System.Linq;
using Db3;
using Db3.Utils;
using Db3.RLS;

namespace Db3.Model
{
    public class CoreContext : DbContext
    {
        public DbSet<PlaceholderEntity> Placeholder
        {
            get;
            set;
        }
        public DbSet<PlaceholderEntityACL> PlaceholderACL
        {
            get;
            set;
        }

        public DbSet<RLS.SecurityObject> SecurityObjects
        {
            get;
            set;
        }
        public DbSet<SimplePlaceHolderEntity> SimplePlaceHolders
        {
            get;
            set;
        }

        //private EFTest.Rules.RuleManager ruleEngine = EFTest.Rules.RuleFactory.GetRuleManager();
        private readonly CurrentUserProvider UserProvider;

        // Used by seed method
        public CoreContext() : base("Db3")
        {
        }

        public CoreContext(CurrentUserProvider userProvider, ConnectionStringProvider connectionStringProvider)
            : base(connectionStringProvider.ConnString)
        {
            UserProvider = userProvider;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            //modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            Configuration.ProxyCreationEnabled = true;
        }

        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)
        {
            // Get errors generated by data annotations
            var DataAnnotationErrors = base.ValidateEntity(entityEntry, items);
            //
            // DataAnnotationErrors.AppendWith(ruleEngine.ExecuteRules(entityEntry));
            return DataAnnotationErrors;
        }

        protected override bool ShouldValidateEntity(DbEntityEntry entityEntry)
        {
            return base.ShouldValidateEntity(entityEntry);
        }

        public override int SaveChanges()
        {
            AddTimestamps();
            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            AddTimestamps();
            return base.SaveChangesAsync(cancellationToken);
        }

        private string currentUsername => SeedUserProvider.User ?? UserProvider.CurrentUserIdentifier;

        private void AddTimestamps()
        {
            var entities = ChangeTracker.Entries().Where(x => x.Entity is IChangeTrackingBase && (x.State == EntityState.Added || x.State == EntityState.Modified));

            foreach (var entity in entities)
            {
                if (entity.State == EntityState.Added)
                {
                    ((IChangeTrackingBase)entity.Entity).DateCreated = DateTime.Now;
                    ((IChangeTrackingBase)entity.Entity).UserCreated = currentUsername;
                }

                if (entity.State == EntityState.Modified)
                {
                    ((IChangeTrackingBase)entity.Entity).DateModified = DateTime.Now;
                    ((IChangeTrackingBase)entity.Entity).UserModified = currentUsername;
                }
            }
        }
    }
}
